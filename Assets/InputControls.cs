//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputControls"",
    ""maps"": [
        {
            ""name"": ""Mainactionmap"",
            ""id"": ""33dcfa7b-0060-47dc-9ebe-4f7fc505e95b"",
            ""actions"": [
                {
                    ""name"": ""PlayerMoveInput"",
                    ""type"": ""Value"",
                    ""id"": ""8ceedbef-6396-40e2-80eb-4516048f8d78"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PlayerFire"",
                    ""type"": ""Button"",
                    ""id"": ""7d0d1f75-d75c-482f-9514-9144a9cd3755"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""4325b1f6-bdbe-41d4-a6c2-d5e9d5eaf5dc"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMoveInput"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""15074239-0f27-4145-9426-eeb7fa0abe65"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMoveInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""49881677-54b3-41c5-b11f-32eacf1afda0"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMoveInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b69a7694-b075-4dbd-960c-379e6fac40d0"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMoveInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""4d187991-9ff3-4abb-92a4-b750b9affaa1"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMoveInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a66f0e70-5694-473d-8b0b-5cf7787338a0"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerFire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Mainactionmap
        m_Mainactionmap = asset.FindActionMap("Mainactionmap", throwIfNotFound: true);
        m_Mainactionmap_PlayerMoveInput = m_Mainactionmap.FindAction("PlayerMoveInput", throwIfNotFound: true);
        m_Mainactionmap_PlayerFire = m_Mainactionmap.FindAction("PlayerFire", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Mainactionmap
    private readonly InputActionMap m_Mainactionmap;
    private List<IMainactionmapActions> m_MainactionmapActionsCallbackInterfaces = new List<IMainactionmapActions>();
    private readonly InputAction m_Mainactionmap_PlayerMoveInput;
    private readonly InputAction m_Mainactionmap_PlayerFire;
    public struct MainactionmapActions
    {
        private @InputControls m_Wrapper;
        public MainactionmapActions(@InputControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @PlayerMoveInput => m_Wrapper.m_Mainactionmap_PlayerMoveInput;
        public InputAction @PlayerFire => m_Wrapper.m_Mainactionmap_PlayerFire;
        public InputActionMap Get() { return m_Wrapper.m_Mainactionmap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainactionmapActions set) { return set.Get(); }
        public void AddCallbacks(IMainactionmapActions instance)
        {
            if (instance == null || m_Wrapper.m_MainactionmapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MainactionmapActionsCallbackInterfaces.Add(instance);
            @PlayerMoveInput.started += instance.OnPlayerMoveInput;
            @PlayerMoveInput.performed += instance.OnPlayerMoveInput;
            @PlayerMoveInput.canceled += instance.OnPlayerMoveInput;
            @PlayerFire.started += instance.OnPlayerFire;
            @PlayerFire.performed += instance.OnPlayerFire;
            @PlayerFire.canceled += instance.OnPlayerFire;
        }

        private void UnregisterCallbacks(IMainactionmapActions instance)
        {
            @PlayerMoveInput.started -= instance.OnPlayerMoveInput;
            @PlayerMoveInput.performed -= instance.OnPlayerMoveInput;
            @PlayerMoveInput.canceled -= instance.OnPlayerMoveInput;
            @PlayerFire.started -= instance.OnPlayerFire;
            @PlayerFire.performed -= instance.OnPlayerFire;
            @PlayerFire.canceled -= instance.OnPlayerFire;
        }

        public void RemoveCallbacks(IMainactionmapActions instance)
        {
            if (m_Wrapper.m_MainactionmapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMainactionmapActions instance)
        {
            foreach (var item in m_Wrapper.m_MainactionmapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MainactionmapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MainactionmapActions @Mainactionmap => new MainactionmapActions(this);
    public interface IMainactionmapActions
    {
        void OnPlayerMoveInput(InputAction.CallbackContext context);
        void OnPlayerFire(InputAction.CallbackContext context);
    }
}
